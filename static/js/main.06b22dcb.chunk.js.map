{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","formatDate","date","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","category","value","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","Date","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b22dcb.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  background-color: darkblue;\r\n  height: 150px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const HeaderText = styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #FFF;\r\n  padding-top: 30px;\r\n\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  margin: auto;\r\n  max-width: 980px;\r\n  margin-bottom: 50px;\r\n`;","import { Category } from '../types/Category';\r\n\r\nexport const categories: Category = {\r\n  food: { title: 'Alimentação', color: 'blue', expense: true },\r\n  rent: { title: 'Aluguel', color: 'brown', expense: true },\r\n  salary: { title: 'Salário', color: 'green', expense: false }\r\n}","import { Item } from '../types/Item';\r\n\r\nexport const items: Item[] = [];","import { Item } from '../types/Item';\r\n\r\nexport const getCurrentMonth = () => {\r\n  let now = new Date();\r\n  return `${now.getFullYear()}-${now.getMonth()+1}`;\r\n}\r\n\r\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\r\n  let newList: Item[] = [];\r\n  let [year, month] = date.split('-');\r\n\r\n  for(let i in list) {\r\n    if (\r\n      list[i].date.getFullYear() === parseInt(year) &&\r\n      (list[i].date.getMonth() + 1 === parseInt(month))\r\n    ) {\r\n      newList.push(list[i]);\r\n    }\r\n  }\r\n  return newList;\r\n}\r\n\r\nexport const formatDate = (date: Date): string => {\r\n  let year = date.getFullYear();\r\n  let month = date.getMonth() + 1;\r\n  let day = date.getDate();\r\n\r\n  return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\r\n}\r\n\r\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`;\r\n\r\nexport const formatCurrentMonth = (currentMonth: string): string => {\r\n    let [year, month] = currentMonth.split('-');\r\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\r\n    return `${months[parseInt(month) - 1]} ${year}`;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Table = styled.table`\r\n  width: 100%;\r\n  background-color: #FFF;\r\n  padding: 20px;\r\n  box-shadow: 0px 0px 5px #CCC;\r\n  border-radius: 10px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const TableHeadColumn = styled.th<{ width?: number }>`\r\n  width: ${props => props.width ? `${props.width}px` : 'auto'};\r\n  padding: 10px 0px;\r\n  text-align: left;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const TableLine = styled.tr``;\r\n\r\nexport const TableColumn = styled.td`\r\n  padding: 10px 0;\r\n`;\r\n\r\nexport const Category = styled.div<{ color: string }>`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  color: #FFF;\r\n  background-color: ${props => props.color};\r\n`;\r\n\r\nexport const Value = styled.div<{ color: string }>`\r\n  color: ${props => props.color};\r\n`;","import * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\nimport { formatDate } from '../../helpers/dateFilter';\r\nimport { categories } from '../../data/categories';\r\n\r\ntype Props = {\r\n  item: Item\r\n}\r\n\r\nexport const TableItem = ({ item}: Props) => {\r\n  return (\r\n    <C.TableLine>\r\n        <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\r\n        <C.TableColumn>\r\n            <C.Category color={categories[item.category].color}>\r\n                {categories[item.category].title}\r\n            </C.Category>\r\n        </C.TableColumn>\r\n        <C.TableColumn>{item.title}</C.TableColumn>\r\n        <C.TableColumn>\r\n          <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\r\n              R$ {item.value}\r\n          </C.Value>\r\n        </C.TableColumn>\r\n    </C.TableLine>\r\n  );\r\n}","import * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\nimport { TableItem} from '../TableItem';\r\n\r\ntype Props = {\r\n  list: Item[]\r\n}\r\n\r\nexport const TableArea = ({ list }: Props) => {\r\n  return (\r\n    <C.Table>\r\n      <thead>\r\n          <tr>\r\n              <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\r\n              <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\r\n              <C.TableHeadColumn>Título</C.TableHeadColumn>\r\n              <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n          {list.map((item, index) => (\r\n            <TableItem key={index} item={item} />\r\n          ))}\r\n      </tbody>\r\n    </C.Table>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  background-color: #FFF;\r\n  box-shadow: 0px 0px 5px #CCC;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  margin-top: -40px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const MonthArea = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const MonthArrow = styled.div`\r\n  width: 40px;\r\n  text-align: center;\r\n  font-size: 25px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const MonthTitle = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ResumeArea = styled.div`\r\n  flex: 2;\r\n  display: flex;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: #888;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const Info = styled.div<{ color?: string }>`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: ${props => props.color ?? '#000'};\r\n`;\r\n\r\n\r\n","import * as C from './styles';\r\n\r\ntype Props = {\r\n  title: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\nexport const ResumeItem = ({ title, value, color}: Props) => {\r\n  return(\r\n    <C.Container>\r\n      <C.Title>{title}</C.Title>\r\n      <C.Info color={color}>R$ {value}</C.Info>\r\n    </C.Container>\r\n  );\r\n}","import * as C from './styles';\r\nimport { formatCurrentMonth } from '../../helpers/dateFilter';\r\nimport { ResumeItem } from '../ResumeItem';\r\n\r\ntype Props = {\r\n  currentMonth: string;\r\n  onMonthChange: (newMonth: string) => void;\r\n  income: number;\r\n  expense: number;\r\n}\r\n\r\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\r\n\r\n  const handlePrevMonth = () => {\r\n      let[year, month] = currentMonth.split('-');\r\n      let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\r\n      currentDate.setMonth( currentDate.getMonth() - 1 );\r\n      onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\r\n  }\r\n\r\n  const handleNextMonth = () => {\r\n      let[year, month] = currentMonth.split('-');\r\n      let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\r\n      currentDate.setMonth( currentDate.getMonth() + 1 );\r\n      onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\r\n  }\r\n\r\n  return (\r\n    <C.Container>\r\n      <C.MonthArea>\r\n          <C.MonthArrow onClick={handlePrevMonth}>⬅️</C.MonthArrow>\r\n          <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\r\n          <C.MonthArrow onClick={handleNextMonth}>➡️</C.MonthArrow>\r\n      </C.MonthArea>\r\n      <C.ResumeArea>\r\n          <ResumeItem title=\"Receitas\" value={income}/>\r\n          <ResumeItem title=\"Despesas\" value={expense}/>\r\n          <ResumeItem \r\n          title=\"Balanço\" \r\n          value={income - expense}\r\n          color={(income - expense) < 0 ? 'red' : 'green'}\r\n          />\r\n      </C.ResumeArea>\r\n    </C.Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #FFF;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\nexport const InputLabel = styled.label`\r\n    flex: 1;\r\n    margin: 10px;\r\n`;\r\nexport const InputTitle = styled.div`\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n`;\r\nexport const Input = styled.input`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nexport const Select = styled.select`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    color: black;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: blue;\r\n        color: white;\r\n    }\r\n`;\r\n\r\n","import { useState } from 'react';\r\nimport * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\nimport { categories } from '../../data/categories';\r\n\r\ntype Props = {\r\n  onAdd: (item: Item) => void;\r\n};\r\n\r\nexport const InputArea = ({ onAdd }: Props) => {\r\n  const [dateField, setDateField] = useState('');\r\n  const [categoryField, setCategoryField] = useState('');\r\n  const [titleField, setTitleField] = useState('');\r\n  const [valueField, setValueField] = useState(0);\r\n\r\n  let categoryKeys: string[] = Object.keys(categories);\r\n\r\n  const handleAddEvent = () => {\r\n    let errors: string[] = [];\r\n\r\n    if(isNaN(new Date(dateField).getTime())) {\r\n      errors.push('Data inválida!');\r\n    }\r\n    if(!categoryKeys.includes(categoryField)) {\r\n      errors.push('Categoria inválida!');\r\n    }\r\n    if(titleField === '') {\r\n      errors.push('Título vazio!');\r\n    }\r\n    if(valueField <= 0) {\r\n      errors.push('Valor inválido!');\r\n    }\r\n\r\n    if(errors.length > 0) {\r\n      alert(errors.join(\"\\n\"));\r\n    } else {\r\n      onAdd({\r\n        date: new Date(dateField),\r\n        category: categoryField,\r\n        title: titleField,\r\n        value: valueField\r\n      });\r\n      clearFields();\r\n    }\r\n  }\r\n\r\n  const clearFields = () => {\r\n    setDateField('');\r\n    setCategoryField('');\r\n    setTitleField('');\r\n    setValueField(0);\r\n  }\r\n\r\n  return (\r\n      <C.Container>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Data</C.InputTitle>\r\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Categoria</C.InputTitle>\r\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\r\n            <>\r\n              <option></option>\r\n              {categoryKeys.map((key, index) => (\r\n                <option key={index} value={key}>{categories[key].title}</option>\r\n              ))}\r\n            </>\r\n          </C.Select>\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Título</C.InputTitle>\r\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Valor</C.InputTitle>\r\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>&nbsp;</C.InputTitle>\r\n          <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\r\n        </C.InputLabel>\r\n      </C.Container>\r\n  );\r\n}\r\n\r\n","import { useState, useEffect } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/Item';\nimport { Category } from './types/Category';\nimport { categories } from './data/categories';\nimport { items } from './data/items';\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter';\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\n\nconst App = () => {\n  const[list, setList] = useState(items);\n  const[filteredList, setFilteredList] = useState<Item[]>([]);\n  const[currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n  const[income, setIncome] = useState(0);\n  const[expense, setExpense] = useState(0);\n\n  useEffect(() => {\n    setFilteredList( filterListByMonth(list, currentMonth));\n  }, [list, currentMonth]);\n\n  useEffect(() => {\n      let incomeCount = 0;\n      let expenseCount = 0;\n\n      for(let i in filteredList) {\n        if(categories[filteredList[i].category].expense) {\n          expenseCount += filteredList[i].value;\n        } else {\n          incomeCount += filteredList[i].value;\n        }\n      }\n      \n      setIncome(incomeCount);\n      setExpense(expenseCount);\n      \n  }, [filteredList]);\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth);\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n\n          <InfoArea \n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n          />\n\n          <InputArea onAdd={handleAddItem} />\n\n          <TableArea list={filteredList} />\n          \n      </C.Body>\n    </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}